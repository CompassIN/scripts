/*-----------------------------------------------------------------------------
    Name: flow
    Generated By: cavisson
    Date of generation: 02/12/2019 05:02:55
    Flow details:
    Build details: 4.1.11 (build# 51)
    Modification History:
-----------------------------------------------------------------------------*/

package com.cavisson.scripts.GCP_DBSpanner_MacysMST_Memissue2;
import java.io.BufferedReader;
import java.io.FileReader;

import pacJnvmApi.NSApi;

public class flow implements NsFlow
{
	private static final int NS_AUTO_STATUS = -1;
	private final int MAX_EXEC_COUNT = 10000;
	private int currCount = 0;
	static NSSpannerEngine nSSpannerEngine = null;
	// private static final int NS_AUTO_STATUS = -1;
	// NSSpannerEngine nSSpannerEngine = null;


	public int execute(NSApi nsApi) throws Exception
	{
		int status = 0;

		nsApi.ns_advance_param("SQLQuery");
		String orderID = nsApi.ns_eval_string("{SQLQuery}");
		
//		BufferedReader bf = new BufferedReader(new FileReader("/home/cavisson/CD_automation/scripts/default/default/GCP_DBSpanner_MacysMST_Memissue2/SQLQuery.seq")); 
//		BufferedReader bffields = new BufferedReader(new FileReader("/home/cavisson/CD_automation/scripts/default/default/GCP_DBSpanner_MacysMST_Memissue2/SQLFields.seq")); 
//		String selectFields = bffields.readLine();
//		String tableName = bffields.readLine();
//		String whereFields = bffields.readLine();
		//System.out.println(" ### query to execute = " + query);


		//String baseQuery = "SELECT NameJson FROM Customer@{FORCE_INDEX=CustomerFirstName} AS FN  where FN.FirstName = ";
		String baseQuery = "SELECT o.orderpk, o.orderid, o.orderStatus, l.lineItemId, json_value(l.lineItemJson, '$.lineHeader.reservation') as reservation FROM OrderHeaderIL@{FORCE_INDEX=OrderHeaderILByOrderId} AS o JOIN LineItemIL AS l ON o.orderpk = l.orderpk WHERE o.orderid =";

//		String strCurrentLine;
//		while((strCurrentLine = bf.readLine()) != null)
		{
			//	query = "SELECT NameJson FROM Customer@{FORCE_INDEX=CustomerFirstName} AS FN  where FN.FirstName =\"FN11";

			// strCurrentLine = bf.readLine();
//			String query = baseQuery + "\""+ strCurrentLine + "\"";
			String query = baseQuery + "\""+ orderID + "\"";
			System.out.println(" ### query to execute = " + query);


			String queryType = "";
			if(query.startsWith("INSERT"))
				queryType = "insertQuery";
			else if(query.startsWith("SELECT"))
				//queryType = "selectQuery";
				queryType = "selectQueryForObject"; // changed to return DTO instead of JSON
			else if(query.startsWith("UPDATE"))
				queryType = "updateQuery";
			else if(query.startsWith("DELETE"))
				queryType = "deleteQuery";

			String InstanceName = nsApi.ns_eval_string("{InstanceName}");
			String DBName = nsApi.ns_eval_string("{DBName}");
			String ProjectID = nsApi.ns_eval_string("{ProjectID}");


			System.out.println(queryType + " ## " + InstanceName+ " ## " +DBName+ " ## " +ProjectID);	
			if(null == nSSpannerEngine)
			{
				currCount = 1;
				nSSpannerEngine = new NSSpannerEngine();	
				status = nsApi.ns_start_transaction("SpannerConnect");
				nSSpannerEngine.intiateDBClient(new String[]{queryType, InstanceName, DBName, ProjectID});
				status = nsApi.ns_end_transaction("SpannerConnect", NS_AUTO_STATUS);
			}

double startTime=System.currentTimeMillis();


			status = nsApi.ns_start_transaction("TotalSizeBeforeConversion");
			this.nSSpannerEngine.spanner_jsonSize();
			status = nsApi.ns_end_transaction("TotalSizeBeforeConversion", NS_AUTO_STATUS);

			status = nsApi.ns_start_transaction("TotalExecuteStmt");
			String Output = nSSpannerEngine.spanner_ns_db_operations(query, new String[]{queryType, InstanceName, DBName, ProjectID});
			status = nsApi.ns_end_transaction("TotalExecuteStmt", NS_AUTO_STATUS);

			status = nsApi.ns_start_transaction("TotalConvertStmt");
			nSSpannerEngine.spanner_jsonToJavaObj();
			status = nsApi.ns_end_transaction("TotalConvertStmt", NS_AUTO_STATUS);

			status = nsApi.ns_start_transaction("TotalSizeAfterConversion");
			nSSpannerEngine.spanner_jsonSize();
			status = nsApi.ns_end_transaction("TotalSizeAfterConversion", NS_AUTO_STATUS);

double endTime=System.currentTimeMillis();
double timeTaken=endTime-startTime;
double thinkTime=0L;



if(timeTaken<1000)
{
	thinkTime=(1000-timeTaken)/1000;
	System.out.println("--->"+(1000-timeTaken));
	//long think=thinkTime/1000;
	
}

System.out.println("elapse time ="+(endTime-startTime) +" Think Time="+thinkTime);

	nsApi.ns_page_think_time(thinkTime);
	


			if(currCount == MAX_EXEC_COUNT)
		{
			status = nsApi.ns_start_transaction("SpannerCloseConnection");
			nSSpannerEngine.closeConnection();
			status = nsApi.ns_end_transaction("SpannerCloseConnection", NS_AUTO_STATUS);
			this.nSSpannerEngine = null;
		}


			System.out.println("****" + Output + "\n****\n");      
		}  
/*
           int isRampDown = nsApi.ns_is_rampdown_user();
    if (isRampDown == 0 )
        System.out.println("The integer is inside if %d\n"+ isRampDown );
    else
       System.out.println("The integer is inside else %d\n"+ isRampDown);

 */
		return status;
	}
}

